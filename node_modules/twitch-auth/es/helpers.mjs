var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { callTwitchApi, HttpStatusCodeError, TwitchApiCallType } from 'twitch-api-call';
import { AccessToken } from "./AccessToken.mjs";
import { InvalidTokenError } from "./Errors/InvalidTokenError.mjs";
import { TokenInfo } from "./TokenInfo.mjs";
/**
 * Retrieves an access token with your client credentials and an authorization code.
 *
 * @param clientId The client ID of your application.
 * @param clientSecret The client secret of your application.
 * @param code The authorization code.
 * @param redirectUri The redirect URI. This serves no real purpose here, but must still match one of the redirect URIs you configured in the Twitch Developer dashboard.
 */
export function exchangeCode(clientId, clientSecret, code, redirectUri) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = AccessToken.bind;
                    return [4 /*yield*/, callTwitchApi({
                            type: TwitchApiCallType.Auth,
                            url: 'token',
                            method: 'POST',
                            query: {
                                grant_type: 'authorization_code',
                                client_id: clientId,
                                client_secret: clientSecret,
                                code: code,
                                redirect_uri: redirectUri
                            }
                        })];
                case 1: return [2 /*return*/, new (_a.apply(AccessToken, [void 0, _b.sent()]))()];
            }
        });
    });
}
/**
 * Retrieves an app access token with your client credentials.
 *
 * @param clientId The client ID of your application.
 * @param clientSecret The client secret of your application.
 * @param clientSecret
 */
export function getAppToken(clientId, clientSecret) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = AccessToken.bind;
                    return [4 /*yield*/, callTwitchApi({
                            type: TwitchApiCallType.Auth,
                            url: 'token',
                            method: 'POST',
                            query: {
                                grant_type: 'client_credentials',
                                client_id: clientId,
                                client_secret: clientSecret
                            }
                        })];
                case 1: return [2 /*return*/, new (_a.apply(AccessToken, [void 0, _b.sent()]))()];
            }
        });
    });
}
/**
 * Refreshes an expired access token with your client credentials and the refresh token that was given by the initial authentication.
 *
 * @param clientId The client ID of your application.
 * @param clientSecret The client secret of your application.
 * @param refreshToken The refresh token.
 */
export function refreshUserToken(clientId, clientSecret, refreshToken) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = AccessToken.bind;
                    return [4 /*yield*/, callTwitchApi({
                            type: TwitchApiCallType.Auth,
                            url: 'token',
                            method: 'POST',
                            query: {
                                grant_type: 'refresh_token',
                                client_id: clientId,
                                client_secret: clientSecret,
                                refresh_token: refreshToken
                            }
                        })];
                case 1: return [2 /*return*/, new (_a.apply(AccessToken, [void 0, _b.sent()]))()];
            }
        });
    });
}
/**
 * Revokes an access token.
 *
 * @param clientId The client ID of your application.
 * @param accessToken The access token.
 */
export function revokeToken(clientId, accessToken) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, callTwitchApi({
                        type: TwitchApiCallType.Auth,
                        url: 'revoke',
                        method: 'POST',
                        query: {
                            client_id: clientId,
                            token: accessToken
                        }
                    })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Retrieves information about an access token.
 *
 * @param clientId The client ID of your application.
 * @param accessToken The access token to get the information of.
 *
 * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
 */
export function getTokenInfo(accessToken, clientId) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, callTwitchApi({ type: TwitchApiCallType.Auth, url: 'validate' }, clientId, accessToken)];
                case 1:
                    data = _a.sent();
                    return [2 /*return*/, new TokenInfo(data)];
                case 2:
                    e_1 = _a.sent();
                    if (e_1 instanceof HttpStatusCodeError && e_1.statusCode === 401) {
                        throw new InvalidTokenError();
                    }
                    throw e_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}
