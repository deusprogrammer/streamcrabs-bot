var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Cacheable, CachedGetter } from '@d-fischer/cache-decorators';
import { BaseApi } from "../BaseApi.mjs";
import { BitsApi } from "./Bits/BitsApi.mjs";
import { ChannelApi } from "./Channel/ChannelApi.mjs";
import { ChatApi } from "./Chat/ChatApi.mjs";
import { SearchApi } from "./Search/SearchApi.mjs";
import { StreamApi } from "./Stream/StreamApi.mjs";
import { TeamApi } from "./Team/TeamApi.mjs";
import { UserApi } from "./User/UserApi.mjs";
import { VideoApi } from "./Video/VideoApi.mjs";
/**
 * Groups all API calls available in Kraken v5.
 *
 * Can be accessed using {@ApiClient#kraken}.
 */
var KrakenApiGroup = /** @class */ (function (_super) {
    __extends(KrakenApiGroup, _super);
    function KrakenApiGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(KrakenApiGroup.prototype, "bits", {
        /**
         * The API methods that deal with bits.
         */
        get: function () {
            return new BitsApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "channels", {
        /**
         * The API methods that deal with channels.
         */
        get: function () {
            return new ChannelApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "chat", {
        /**
         * The API methods that deal with chat.
         */
        get: function () {
            return new ChatApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "search", {
        /**
         * The API methods that deal with searching.
         */
        get: function () {
            return new SearchApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "streams", {
        /**
         * The API methods that deal with streams.
         */
        get: function () {
            return new StreamApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "teams", {
        /**
         * The API methods that deal with teams.
         */
        get: function () {
            return new TeamApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "videos", {
        /**
         * The API methods that deal with videos.
         */
        get: function () {
            return new VideoApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(KrakenApiGroup.prototype, "users", {
        /**
         * The API methods that deal with users.
         */
        get: function () {
            return new UserApi(this._client);
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "bits", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "channels", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "chat", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "search", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "streams", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "teams", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "videos", null);
    __decorate([
        CachedGetter()
    ], KrakenApiGroup.prototype, "users", null);
    KrakenApiGroup = __decorate([
        Cacheable
    ], KrakenApiGroup);
    return KrakenApiGroup;
}(BaseApi));
export { KrakenApiGroup };
