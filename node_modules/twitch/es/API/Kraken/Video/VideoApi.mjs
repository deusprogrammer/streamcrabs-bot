var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { TwitchApiCallType } from 'twitch-api-call';
import { extractUserId } from "../../../index.mjs";
import { BaseApi } from "../../BaseApi.mjs";
import { CreatedVideo } from "./CreatedVideo.mjs";
import { Video } from "./Video.mjs";
/**
 * The API methods that deal with users.
 *
 * Can be accessed using `client.kraken.videos` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const client = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const user = await client.kraken.videos.getUser('125328655');
 * ```
 */
var VideoApi = /** @class */ (function (_super) {
    __extends(VideoApi, _super);
    function VideoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a video by ID.
     *
     * @param id The ID of the video.
     */
    VideoApi.prototype.getVideo = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({ url: "videos/" + id })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new Video(data, this._client)];
                }
            });
        });
    };
    /**
     * Retrieves the top videos.
     *
     * @param game Show only videos of a certain game.
     * @param searchPeriod Show only videos from a certain time period.
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    VideoApi.prototype.getTopVideos = function (game, searchPeriod, type, languageCode, sort, page, limit) {
        if (limit === void 0) { limit = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {
                            limit: limit.toString(),
                            game: game,
                            period: searchPeriod,
                            broadcast_type: type,
                            language: languageCode,
                            sort: sort,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        };
                        return [4 /*yield*/, this._client.callApi({ url: 'videos/top', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.vods.map(function (vod) { return new Video(vod, _this._client); })];
                }
            });
        });
    };
    /**
     * Retrieves the videos from channels followed by the authenticated user.
     *
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    VideoApi.prototype.getFollowedVideos = function (type, languageCode, sort, page, limit) {
        if (limit === void 0) { limit = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = {
                            limit: limit.toString(),
                            broadcast_type: type,
                            language: languageCode,
                            sort: sort,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        };
                        return [4 /*yield*/, this._client.callApi({ url: 'videos/followed', query: query })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.vods.map(function (vod) { return new Video(vod, _this._client); })];
                }
            });
        });
    };
    /**
     * Creates a new video.
     *
     * @param channel The channel to upload the video to.
     * @param createData The data for the video.
     */
    VideoApi.prototype.createVideo = function (channel, createData) {
        return __awaiter(this, void 0, void 0, function () {
            var channelId, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        channelId = extractUserId(channel);
                        return [4 /*yield*/, this._client.callApi({
                                url: 'videos',
                                method: 'POST',
                                scope: 'channel_editor',
                                query: __assign({ channel_id: channelId }, createData)
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new CreatedVideo(data, this._client)];
                }
            });
        });
    };
    /**
     * Completes a video upload.
     *
     * @param id The ID of the video.
     * @param token The upload token.
     */
    VideoApi.prototype.completeVideoUpload = function (id, token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "https://uploads.twitch.tv/upload/" + id + "/complete",
                            type: TwitchApiCallType.Custom,
                            method: 'POST',
                            auth: false,
                            query: {
                                upload_token: token
                            }
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Updates an already uploaded video.
     *
     * @param id The ID of the video.
     * @param updateData The data to change for the video.
     */
    VideoApi.prototype.updateVideo = function (id, updateData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "videos/" + id,
                            method: 'PUT',
                            scope: 'channel_editor',
                            jsonBody: updateData
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes a video.
     *
     * @param id The ID of the video.
     */
    VideoApi.prototype.deleteVideo = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.callApi({
                            url: "videos/" + id,
                            method: 'DELETE',
                            scope: 'channel_editor'
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return VideoApi;
}(BaseApi));
export { VideoApi };
