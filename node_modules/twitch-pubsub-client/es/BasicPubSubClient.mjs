var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { PersistentConnection, WebSocketConnection } from '@d-fischer/connection';
import { Logger, LogLevel } from '@d-fischer/logger';
import { Enumerable } from '@d-fischer/shared-utils';
import { EventEmitter } from '@d-fischer/typed-event-emitter';
import { HellFreezesOverError, InvalidTokenError } from 'twitch';
import { getTokenInfo } from 'twitch-auth';
/**
 * A client for the Twitch PubSub interface.
 */
var BasicPubSubClient = /** @class */ (function (_super) {
    __extends(BasicPubSubClient, _super);
    /**
     * Creates a new PubSub client.
     *
     * @param logLevel The level of logging to use for the PubSub client.
     */
    function BasicPubSubClient(logLevel) {
        if (logLevel === void 0) { logLevel = LogLevel.WARNING; }
        var _this = _super.call(this) || this;
        // topic => token
        _this._topics = new Map();
        _this._pingOnInactivity = 60;
        _this._pingTimeout = 60;
        _this._onPong = _this.registerEvent();
        _this._onResponse = _this.registerEvent();
        /**
         * Fires when a message that matches your listening topics is received.
         *
         * @eventListener
         * @param topic The name of the topic.
         * @param message The message data.
         */
        _this.onMessage = _this.registerEvent();
        /**
         * Fires when the client finishes establishing a connection to the PubSub server.
         *
         * @eventListener
         */
        _this.onConnect = _this.registerEvent();
        /**
         * Fires when the client closes its connection to the PubSub server.
         *
         * @eventListener
         * @param isError Whether the cause of the disconnection was an error. A reconnect will be attempted if this is true.
         */
        _this.onDisconnect = _this.registerEvent();
        /**
         * Fires when the client receives a pong message from the PubSub server.
         *
         * @eventListener
         * @param latency The current latency to the server, in milliseconds.
         * @param requestTimestampe The time the ping request was sent to the PubSub server.
         */
        _this.onPong = _this.registerEvent();
        _this._logger = new Logger({
            name: 'twitch-pubsub-client',
            emoji: true,
            minLevel: logLevel
        });
        _this._connection = new PersistentConnection(WebSocketConnection, { hostName: 'pubsub-edge.twitch.tv', port: 443, secure: true }, { logger: _this._logger });
        _this._connection.onConnect(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._logger.info('Connection established');
                        return [4 /*yield*/, this._resendListens()];
                    case 1:
                        _a.sent();
                        if (this._topics.size) {
                            this._logger.info('Listened to previously registered topics');
                            this._logger.debug("Previously registered topics: " + Array.from(this._topics.keys()).join(', '));
                        }
                        this._startPingCheckTimer();
                        this.emit(this.onConnect);
                        return [2 /*return*/];
                }
            });
        }); });
        _this._connection.onReceive(function (line) {
            _this._receiveMessage(line);
            _this._startPingCheckTimer();
        });
        _this._connection.onDisconnect(function (manually, reason) {
            if (_this._pingCheckTimer) {
                clearTimeout(_this._pingCheckTimer);
            }
            if (_this._pingTimeoutTimer) {
                clearTimeout(_this._pingTimeoutTimer);
            }
            if (manually) {
                _this._logger.info('Disconnected');
            }
            else {
                if (reason) {
                    _this._logger.err("Disconnected unexpectedly: " + reason.message);
                }
                else {
                    _this._logger.err('Disconnected unexpectedly');
                }
            }
            _this.emit(_this.onDisconnect, manually, reason);
        });
        return _this;
    }
    /**
     * Listens to one or more topics.
     *
     * @param topics A topic or a list of topics to listen to.
     * @param tokenResolvable An access token, an AuthProvider or a function that returns a token.
     * @param scope The scope necessary for the topic(s).
     */
    BasicPubSubClient.prototype.listen = function (topics, tokenResolvable, scope) {
        return __awaiter(this, void 0, void 0, function () {
            var wrapped, topics_1, topics_1_1, topic, _a, _b;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (typeof topics === 'string') {
                            topics = [topics];
                        }
                        wrapped = this._wrapResolvable(tokenResolvable, scope);
                        try {
                            for (topics_1 = __values(topics), topics_1_1 = topics_1.next(); !topics_1_1.done; topics_1_1 = topics_1.next()) {
                                topic = topics_1_1.value;
                                this._topics.set(topic, wrapped);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (topics_1_1 && !topics_1_1.done && (_c = topics_1.return)) _c.call(topics_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (!this.isConnected) return [3 /*break*/, 3];
                        _a = this._sendListen;
                        _b = [topics];
                        return [4 /*yield*/, this._resolveToken(wrapped)];
                    case 1: return [4 /*yield*/, _a.apply(this, _b.concat([_d.sent()]))];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes one or more topics from the listener.
     *
     * @param topics A topic or a list of topics to not listen to anymore.
     */
    BasicPubSubClient.prototype.unlisten = function (topics) {
        return __awaiter(this, void 0, void 0, function () {
            var topics_2, topics_2_1, topic;
            var e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof topics === 'string') {
                            topics = [topics];
                        }
                        try {
                            for (topics_2 = __values(topics), topics_2_1 = topics_2.next(); !topics_2_1.done; topics_2_1 = topics_2.next()) {
                                topic = topics_2_1.value;
                                this._topics.delete(topic);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (topics_2_1 && !topics_2_1.done && (_a = topics_2.return)) _a.call(topics_2);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (!this.isConnected) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._sendUnlisten(topics)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Connects to the PubSub interface.
     */
    BasicPubSubClient.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this._connection.isConnected && !this._connection.isConnecting)) return [3 /*break*/, 2];
                        this._logger.info('Connecting...');
                        return [4 /*yield*/, this._connection.connect()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Disconnects from the PubSub interface.
     */
    BasicPubSubClient.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._logger.info('Disconnecting...');
                return [2 /*return*/, this._connection.disconnect()];
            });
        });
    };
    /**
     * Reconnects to the PubSub interface.
     */
    BasicPubSubClient.prototype.reconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.disconnect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.connect()];
                }
            });
        });
    };
    Object.defineProperty(BasicPubSubClient.prototype, "isConnecting", {
        /**
         * Checks whether the client is currently connecting to the server.
         */
        get: function () {
            var _a, _b;
            return (_b = (_a = this._connection) === null || _a === void 0 ? void 0 : _a.isConnecting) !== null && _b !== void 0 ? _b : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BasicPubSubClient.prototype, "isConnected", {
        /**
         * Checks whether the client is currently connected to the server.
         */
        get: function () {
            var _a, _b;
            return (_b = (_a = this._connection) === null || _a === void 0 ? void 0 : _a.isConnected) !== null && _b !== void 0 ? _b : false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BasicPubSubClient.prototype, "hasAnyTopics", {
        /** @private */
        get: function () {
            return this._topics.size > 0;
        },
        enumerable: false,
        configurable: true
    });
    BasicPubSubClient.prototype._sendListen = function (topics, accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._sendNonced({
                        type: 'LISTEN',
                        data: {
                            topics: topics,
                            auth_token: accessToken
                        }
                    })];
            });
        });
    };
    BasicPubSubClient.prototype._sendUnlisten = function (topics) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._sendNonced({
                        type: 'UNLISTEN',
                        data: {
                            topics: topics
                        }
                    })];
            });
        });
    };
    BasicPubSubClient.prototype._wrapResolvable = function (resolvable, scope) {
        switch (typeof resolvable) {
            case 'object': {
                if (resolvable === null) {
                    return {
                        type: 'null'
                    };
                }
                if ('type' in resolvable) {
                    return resolvable;
                }
                return {
                    type: 'provider',
                    provider: resolvable,
                    scopes: scope ? [scope] : []
                };
            }
            case 'string': {
                return {
                    type: 'static',
                    token: resolvable
                };
            }
            case 'function': {
                return {
                    type: 'function',
                    function: resolvable
                };
            }
            case 'undefined': {
                return {
                    type: 'null'
                };
            }
            default: {
                throw new HellFreezesOverError("Passed unknown type to wrapResolvable: " + typeof resolvable);
            }
        }
    };
    BasicPubSubClient.prototype._resolveToken = function (resolvable) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, provider, scopes, lastTokenError, accessToken, e_3, newToken, e_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = resolvable.type;
                        switch (_a) {
                            case 'provider': return [3 /*break*/, 1];
                            case 'function': return [3 /*break*/, 14];
                            case 'static': return [3 /*break*/, 15];
                            case 'null': return [3 /*break*/, 16];
                        }
                        return [3 /*break*/, 17];
                    case 1:
                        provider = resolvable.provider, scopes = resolvable.scopes;
                        lastTokenError = undefined;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 6, , 7]);
                        return [4 /*yield*/, provider.getAccessToken(scopes)];
                    case 3:
                        accessToken = _b.sent();
                        if (!accessToken) return [3 /*break*/, 5];
                        // check validity
                        return [4 /*yield*/, getTokenInfo(accessToken.accessToken)];
                    case 4:
                        // check validity
                        _b.sent();
                        return [2 /*return*/, accessToken.accessToken];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        e_3 = _b.sent();
                        if (e_3 instanceof InvalidTokenError) {
                            lastTokenError = e_3;
                        }
                        else {
                            this._logger.err("Retrieving an access token failed: " + e_3.message);
                        }
                        return [3 /*break*/, 7];
                    case 7:
                        this._logger.warning('No valid token available; trying to refresh');
                        if (!provider.refresh) return [3 /*break*/, 13];
                        _b.label = 8;
                    case 8:
                        _b.trys.push([8, 12, , 13]);
                        return [4 /*yield*/, provider.refresh()];
                    case 9:
                        newToken = _b.sent();
                        if (!newToken) return [3 /*break*/, 11];
                        // check validity
                        return [4 /*yield*/, getTokenInfo(newToken.accessToken)];
                    case 10:
                        // check validity
                        _b.sent();
                        return [2 /*return*/, newToken.accessToken];
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        e_4 = _b.sent();
                        if (e_4 instanceof InvalidTokenError) {
                            lastTokenError = e_4;
                        }
                        else {
                            this._logger.err("Refreshing the access token failed: " + e_4.message);
                        }
                        return [3 /*break*/, 13];
                    case 13: throw lastTokenError || new Error('Could not retrieve a valid token');
                    case 14:
                        {
                            return [2 /*return*/, resolvable.function()];
                        }
                        _b.label = 15;
                    case 15:
                        {
                            return [2 /*return*/, resolvable.token];
                        }
                        _b.label = 16;
                    case 16:
                        {
                            return [2 /*return*/, undefined];
                        }
                        _b.label = 17;
                    case 17:
                        {
                            throw new HellFreezesOverError("Passed unknown type to resolveToken: " + resolvable.type);
                        }
                        _b.label = 18;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    BasicPubSubClient.prototype._resendListens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var topicsByTokenResolvable, _a, _b, _c, topic, tokenResolvable, topicsByToken, topicsByTokenResolvable_1, topicsByTokenResolvable_1_1, _d, tokenResolvable, topics, token, e_5_1;
            var e_6, _e, e_5, _f, _g;
            var _this = this;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        topicsByTokenResolvable = new Map();
                        try {
                            for (_a = __values(this._topics), _b = _a.next(); !_b.done; _b = _a.next()) {
                                _c = __read(_b.value, 2), topic = _c[0], tokenResolvable = _c[1];
                                if (topicsByTokenResolvable.has(tokenResolvable)) {
                                    topicsByTokenResolvable.get(tokenResolvable).push(topic);
                                }
                                else {
                                    topicsByTokenResolvable.set(tokenResolvable, [topic]);
                                }
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                        topicsByToken = new Map();
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, 7, 8]);
                        topicsByTokenResolvable_1 = __values(topicsByTokenResolvable), topicsByTokenResolvable_1_1 = topicsByTokenResolvable_1.next();
                        _h.label = 2;
                    case 2:
                        if (!!topicsByTokenResolvable_1_1.done) return [3 /*break*/, 5];
                        _d = __read(topicsByTokenResolvable_1_1.value, 2), tokenResolvable = _d[0], topics = _d[1];
                        return [4 /*yield*/, this._resolveToken(tokenResolvable)];
                    case 3:
                        token = _h.sent();
                        if (topicsByToken.has(token)) {
                            (_g = topicsByToken.get(token)).push.apply(_g, __spread(topics));
                        }
                        else {
                            topicsByToken.set(token, topics);
                        }
                        _h.label = 4;
                    case 4:
                        topicsByTokenResolvable_1_1 = topicsByTokenResolvable_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_5_1 = _h.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (topicsByTokenResolvable_1_1 && !topicsByTokenResolvable_1_1.done && (_f = topicsByTokenResolvable_1.return)) _f.call(topicsByTokenResolvable_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, Promise.all(Array.from(topicsByToken.entries()).map(function (_a) {
                            var _b = __read(_a, 2), token = _b[0], topics = _b[1];
                            return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_c) {
                                return [2 /*return*/, this._sendListen(topics, token)];
                            }); });
                        }))];
                }
            });
        });
    };
    BasicPubSubClient.prototype._sendNonced = function (packet) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var nonce = Math.random().toString(16).slice(2);
                        _this._onResponse(function (recvNonce, error) {
                            if (recvNonce === nonce) {
                                if (error) {
                                    reject(new Error("Error sending nonced " + packet.type + " packet: " + error));
                                }
                                else {
                                    resolve();
                                }
                            }
                        });
                        packet.nonce = nonce;
                        _this._sendPacket(packet);
                    })];
            });
        });
    };
    BasicPubSubClient.prototype._receiveMessage = function (dataStr) {
        this._logger.debug("Received message: " + dataStr);
        var data = JSON.parse(dataStr);
        switch (data.type) {
            case 'PONG': {
                this.emit(this._onPong);
                break;
            }
            case 'RECONNECT': {
                // tslint:disable-next-line:no-floating-promises
                this.reconnect();
                break;
            }
            case 'RESPONSE': {
                this.emit(this._onResponse, data.nonce, data.error);
                break;
            }
            case 'MESSAGE': {
                this.emit(this.onMessage, data.data.topic, JSON.parse(data.data.message));
                break;
            }
            default: {
                this._logger.warn("PubSub connection received unexpected message type: " + data.type);
            }
        }
    };
    BasicPubSubClient.prototype._sendPacket = function (data) {
        var dataStr = JSON.stringify(data);
        this._logger.debug("Sending message: " + dataStr);
        this._connection.sendLine(dataStr);
    };
    BasicPubSubClient.prototype._pingCheck = function () {
        var _this = this;
        var pingTime = Date.now();
        var pongListener = this._onPong(function () {
            var latency = Date.now() - pingTime;
            _this.emit(_this.onPong, latency, pingTime);
            _this._logger.info("Current latency: " + latency + "ms");
            if (_this._pingTimeoutTimer) {
                clearTimeout(_this._pingTimeoutTimer);
            }
            _this.removeListener(pongListener);
        });
        this._pingTimeoutTimer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._logger.err('Ping timeout');
                this.removeListener(pongListener);
                return [2 /*return*/, this.reconnect()];
            });
        }); }, this._pingTimeout * 1000);
        this._sendPacket({ type: 'PING' });
    };
    BasicPubSubClient.prototype._startPingCheckTimer = function () {
        var _this = this;
        if (this._pingCheckTimer) {
            clearInterval(this._pingCheckTimer);
        }
        this._pingCheckTimer = setInterval(function () { return _this._pingCheck(); }, this._pingOnInactivity * 1000);
    };
    __decorate([
        Enumerable(false)
    ], BasicPubSubClient.prototype, "_logger", void 0);
    __decorate([
        Enumerable(false)
    ], BasicPubSubClient.prototype, "_topics", void 0);
    return BasicPubSubClient;
}(EventEmitter));
export { BasicPubSubClient };
