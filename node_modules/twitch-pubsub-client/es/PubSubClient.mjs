var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Enumerable } from '@d-fischer/shared-utils';
import { extractUserId } from 'twitch';
import { getTokenInfo } from 'twitch-auth';
import { BasicPubSubClient } from "./BasicPubSubClient.mjs";
import { SingleUserPubSubClient } from "./SingleUserPubSubClient.mjs";
/**
 * A high level PubSub client attachable to a multiple users.
 */
var PubSubClient = /** @class */ (function () {
    /**
     * Creates a new PubSub client.
     *
     * @param rootClient A previously existing PubSubClient instance.
     *
     * If not given, one will be created with the default options.
     */
    function PubSubClient(rootClient) {
        this._userClients = new Map();
        this._rootClient = rootClient !== null && rootClient !== void 0 ? rootClient : new BasicPubSubClient();
    }
    /**
     * Attaches a new user to the listener and returns the user ID for convenience.
     *
     * @param apiClient The client that provides authentication for the user.
     * @param user The user that the client will be attached to.
     *
     * This should only be passed manually if you fetched the token info for the `apiClient` before.
     *
     * If not given, the user will be determined from the `apiClient`.
     */
    PubSubClient.prototype.registerUserListener = function (apiClient, user) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, token, tokenInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!user) return [3 /*break*/, 1];
                        userId = extractUserId(user);
                        return [3 /*break*/, 4];
                    case 1:
                        if (apiClient.tokenType === 'app') {
                            throw new Error('Passed an auth provider that is not bound to a user');
                        }
                        return [4 /*yield*/, apiClient.getAccessToken()];
                    case 2:
                        token = _a.sent();
                        if (!token) {
                            throw new Error('Could not get an access token to link the listener to a user');
                        }
                        return [4 /*yield*/, getTokenInfo(token.accessToken)];
                    case 3:
                        tokenInfo = _a.sent();
                        userId = tokenInfo.userId;
                        _a.label = 4;
                    case 4:
                        this._userClients.set(userId, new SingleUserPubSubClient({ twitchClient: apiClient, pubSubClient: this._rootClient }));
                        return [2 /*return*/, userId];
                }
            });
        });
    };
    /** @private */
    PubSubClient.prototype.getUserListener = function (user) {
        var userId = extractUserId(user);
        if (!this._userClients.has(userId)) {
            throw new Error("No API client registered for user ID " + userId);
        }
        return this._userClients.get(userId);
    };
    /**
     * Adds a listener to bits events to the client.
     *
     * @param user The user this event will be subscribed for.
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsMessage} object.
     */
    PubSubClient.prototype.onBits = function (user, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserListener(user).onBits(callback)];
            });
        });
    };
    /**
     * Adds a listener to bits badge unlock events to the client.
     *
     * @param user The user this event will be subscribed for.
     * @param callback A function to be called when a bit badge is unlocked in the user's channel.
     *
     * It receives a {@PubSubBitsBadgeUnlockMessage} object.
     */
    PubSubClient.prototype.onBitsBadgeUnlock = function (user, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserListener(user).onBitsBadgeUnlock(callback)];
            });
        });
    };
    /**
     * Adds a listener to redemption events to the client.
     *
     * @param user The user this event will be subscribed for.
     * @param callback A function to be called when a channel point reward is redeemed in the user's channel.
     *
     * It receives a {@PubSubBitsRedemptionMessage} object.
     */
    PubSubClient.prototype.onRedemption = function (user, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserListener(user).onRedemption(callback)];
            });
        });
    };
    /**
     * Adds a listener to subscription events to the client.
     *
     * @param user The user this event will be subscribed for.
     * @param callback A function to be called when a subscription event happens in the user's channel.
     *
     * It receives a {@PubSubSubscriptionMessage} object.
     */
    PubSubClient.prototype.onSubscription = function (user, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserListener(user).onSubscription(callback)];
            });
        });
    };
    /**
     * Adds a listener to whisper events to the client.
     *
     * @param user The user this event will be subscribed for.
     * @param callback A function to be called when a whisper is sent to the user.
     *
     * It receives a {@PubSubWhisperMessage} object.
     */
    PubSubClient.prototype.onWhisper = function (user, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserListener(user).onWhisper(callback)];
            });
        });
    };
    /**
     * Adds a listener to mod action events to the client.
     *
     * @param user The user this event will be subscribed for.
     * @param channel The channel this event will be subscribed for.
     * @param callback A function to be called when a mod action event is sent to the user.
     *
     * It receives a {@PubSubChatModActionMessage} object.
     */
    PubSubClient.prototype.onModAction = function (user, channel, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getUserListener(user).onModAction(channel, callback)];
            });
        });
    };
    __decorate([
        Enumerable(false)
    ], PubSubClient.prototype, "_rootClient", void 0);
    __decorate([
        Enumerable(false)
    ], PubSubClient.prototype, "_userClients", void 0);
    return PubSubClient;
}());
export { PubSubClient };
