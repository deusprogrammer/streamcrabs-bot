var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { LogLevel } from '@d-fischer/logger';
import { Enumerable } from '@d-fischer/shared-utils';
import { extractUserId, InvalidTokenError } from 'twitch';
import { BasicPubSubClient } from "./BasicPubSubClient.mjs";
import { PubSubBitsBadgeUnlockMessage } from "./Messages/PubSubBitsBadgeUnlockMessage.mjs";
import { PubSubBitsMessage } from "./Messages/PubSubBitsMessage.mjs";
import { PubSubChatModActionMessage } from "./Messages/PubSubChatModActionMessage.mjs";
import { PubSubRedemptionMessage } from "./Messages/PubSubRedemptionMessage.mjs";
import { PubSubSubscriptionMessage } from "./Messages/PubSubSubscriptionMessage.mjs";
import { PubSubWhisperMessage } from "./Messages/PubSubWhisperMessage.mjs";
import { PubSubListener } from "./PubSubListener.mjs";
/**
 * A higher level PubSub client attached to a single user.
 */
var SingleUserPubSubClient = /** @class */ (function () {
    /**
     * Creates a new Twitch PubSub client.
     *
     * @expandParams
     */
    function SingleUserPubSubClient(_a) {
        var _this = this;
        var twitchClient = _a.twitchClient, pubSubClient = _a.pubSubClient, _b = _a.logLevel, logLevel = _b === void 0 ? LogLevel.WARNING : _b;
        this._listeners = new Map();
        this._apiClient = twitchClient;
        this._pubSubClient = pubSubClient || new BasicPubSubClient(logLevel);
        this._pubSubClient.onMessage(function (topic, messageData) { return __awaiter(_this, void 0, void 0, function () {
            var _a, type, userId, args, _b, _c, message, _d, _e, listener;
            var e_1, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _a = __read(topic.split('.')), type = _a[0], userId = _a[1], args = _a.slice(2);
                        _b = this._listeners.has(topic);
                        if (!_b) return [3 /*break*/, 2];
                        _c = userId;
                        return [4 /*yield*/, this._getUserId()];
                    case 1:
                        _b = _c === (_g.sent());
                        _g.label = 2;
                    case 2:
                        if (_b) {
                            message = void 0;
                            switch (type) {
                                case 'channel-bits-events-v2': {
                                    message = new PubSubBitsMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'channel-bits-badge-unlocks': {
                                    message = new PubSubBitsBadgeUnlockMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'channel-points-channel-v1': {
                                    message = new PubSubRedemptionMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'channel-subscribe-events-v1': {
                                    message = new PubSubSubscriptionMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'chat_moderator_actions': {
                                    message = new PubSubChatModActionMessage(messageData, args[0], this._apiClient);
                                    break;
                                }
                                case 'whispers': {
                                    message = new PubSubWhisperMessage(messageData, this._apiClient);
                                    break;
                                }
                                default:
                                    return [2 /*return*/];
                            }
                            try {
                                for (_d = __values(this._listeners.get(topic)), _e = _d.next(); !_e.done; _e = _d.next()) {
                                    listener = _e.value;
                                    listener.call(message);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    }
    /**
     * Adds a listener to bits events to the client.
     *
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsMessage} object.
     */
    SingleUserPubSubClient.prototype.onBits = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-bits-events-v2', callback, 'bits:read')];
            });
        });
    };
    /**
     * Adds a listener to bits badge unlock events to the client.
     *
     * @param callback A function to be called when a bit badge is unlocked in the user's channel.
     *
     * It receives a {@PubSubBitsBadgeUnlockMessage} object.
     */
    SingleUserPubSubClient.prototype.onBitsBadgeUnlock = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-bits-badge-unlocks', callback, 'bits:read')];
            });
        });
    };
    /**
     * Adds a listener to redemption events to the client.
     *
     * @param callback A function to be called when a channel point reward is redeemed in the user's channel.
     *
     * It receives a {@PubSubBitsRedemptionMessage} object.
     */
    SingleUserPubSubClient.prototype.onRedemption = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-points-channel-v1', callback, 'channel:read:redemptions')];
            });
        });
    };
    /**
     * Adds a listener to subscription events to the client.
     *
     * @param callback A function to be called when a subscription event happens in the user's channel.
     *
     * It receives a {@PubSubSubscriptionMessage} object.
     */
    SingleUserPubSubClient.prototype.onSubscription = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-subscribe-events-v1', callback, 'channel_subscriptions')];
            });
        });
    };
    /**
     * Adds a listener to whisper events to the client.
     *
     * @param callback A function to be called when a whisper is sent to the user.
     *
     * It receives a {@PubSubWhisperMessage} object.
     */
    SingleUserPubSubClient.prototype.onWhisper = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('whispers', callback, 'whispers:read')];
            });
        });
    };
    /**
     * Adds a listener to mod action events to the client.
     *
     * @param channelId The ID of the channel to listen to.
     * @param callback A function to be called when a mod action event is sent to the user.
     *
     * It receives a {@PubSubChatModActionMessage} object.
     */
    SingleUserPubSubClient.prototype.onModAction = function (channelId, callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._addListener('chat_moderator_actions', callback, 'channel:moderate', extractUserId(channelId))];
            });
        });
    };
    /**
     * Removes a listener from the client.
     *
     * @param listener A listener returned by one of the `add*Listener` methods.
     */
    SingleUserPubSubClient.prototype.removeListener = function (listener) {
        return __awaiter(this, void 0, void 0, function () {
            var newListeners;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._listeners.has(listener.type)) return [3 /*break*/, 5];
                        newListeners = this._listeners.get(listener.type).filter(function (l) { return l !== listener; });
                        if (!(newListeners.length === 0)) return [3 /*break*/, 4];
                        this._listeners.delete(listener.type);
                        return [4 /*yield*/, this._pubSubClient.unlisten(listener.type + "." + listener.userId)];
                    case 1:
                        _a.sent();
                        if (!(!this._pubSubClient.hasAnyTopics &&
                            (this._pubSubClient.isConnected || this._pubSubClient.isConnecting))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._pubSubClient.disconnect()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        this._listeners.set(listener.type, newListeners);
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SingleUserPubSubClient.prototype._getUserId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokenData, lastTokenError, userId, e_2, newTokenInfo, userId, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._userId) {
                            return [2 /*return*/, this._userId];
                        }
                        return [4 /*yield*/, this._apiClient.getAccessToken()];
                    case 1:
                        tokenData = _a.sent();
                        lastTokenError = undefined;
                        if (!tokenData) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this._apiClient.getTokenInfo()];
                    case 3:
                        userId = (_a.sent()).userId;
                        return [2 /*return*/, (this._userId = userId)];
                    case 4:
                        e_2 = _a.sent();
                        if (e_2 instanceof InvalidTokenError) {
                            lastTokenError = e_2;
                        }
                        else {
                            throw e_2;
                        }
                        return [3 /*break*/, 5];
                    case 5:
                        _a.trys.push([5, 9, , 10]);
                        return [4 /*yield*/, this._apiClient.refreshAccessToken()];
                    case 6:
                        newTokenInfo = _a.sent();
                        if (!newTokenInfo) return [3 /*break*/, 8];
                        return [4 /*yield*/, this._apiClient.getTokenInfo()];
                    case 7:
                        userId = (_a.sent()).userId;
                        return [2 /*return*/, (this._userId = userId)];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_3 = _a.sent();
                        if (e_3 instanceof InvalidTokenError) {
                            lastTokenError = e_3;
                        }
                        else {
                            throw e_3;
                        }
                        return [3 /*break*/, 10];
                    case 10: throw lastTokenError || new Error('PubSub authentication failed');
                }
            });
        });
    };
    SingleUserPubSubClient.prototype._addListener = function (type, callback, scope) {
        var additionalParams = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            additionalParams[_i - 3] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var userId, topicName, listener;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._pubSubClient.connect()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._getUserId()];
                    case 2:
                        userId = _a.sent();
                        topicName = __spread([type, userId], additionalParams).join('.');
                        listener = new PubSubListener(type, userId, callback, this);
                        if (!this._listeners.has(topicName)) return [3 /*break*/, 3];
                        this._listeners.get(topicName).push(listener);
                        return [3 /*break*/, 5];
                    case 3:
                        this._listeners.set(topicName, [listener]);
                        return [4 /*yield*/, this._pubSubClient.listen(topicName, this._apiClient, scope)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, listener];
                }
            });
        });
    };
    __decorate([
        Enumerable(false)
    ], SingleUserPubSubClient.prototype, "_apiClient", void 0);
    __decorate([
        Enumerable(false)
    ], SingleUserPubSubClient.prototype, "_pubSubClient", void 0);
    return SingleUserPubSubClient;
}());
export { SingleUserPubSubClient };
