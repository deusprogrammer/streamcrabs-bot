import { ApiClient } from 'twitch';
export interface PubSubRedemptionMessageUserData {
    id: string;
    login: string;
    display_name: string;
}
export interface PubSubRedemptionMessageImageData {
    url_1x: string;
    url_2x: string;
    url_4x: string;
}
export interface PubSubRedemptionMessageRewardData {
    id: string;
    channel_id: string;
    title: string;
    prompt: string;
    cost: number;
    is_user_input_required: boolean;
    is_sub_only: boolean;
    image: PubSubRedemptionMessageImageData;
    default_image: PubSubRedemptionMessageImageData;
    background_color: string;
    is_enabled: boolean;
    is_paused: boolean;
    is_in_stock: boolean;
    max_per_stream: {
        is_enabled: boolean;
        max_per_stream: number;
    };
    should_redemptions_skip_request_queue: boolean;
}
export interface PubSubRedemptionMessageRedemptionData {
    id: string;
    user: PubSubRedemptionMessageUserData;
    channel_id: string;
    redeemed_at: string;
    reward: PubSubRedemptionMessageRewardData;
    user_input: string;
    status: 'FULFILLED' | 'UNFULFILLED';
}
export interface PubSubRedemptionMessageContent {
    timestamp: string;
    redemption: PubSubRedemptionMessageRedemptionData;
}
export interface PubSubRedemptionMessageData {
    type: 'reward-redeemed';
    data: PubSubRedemptionMessageContent;
}
/**
 * A message that informs about a user redeeming a custom channel points reward.
 */
export declare class PubSubRedemptionMessage {
    private readonly _data;
    private readonly _apiClient;
    /** @private */
    constructor(_data: PubSubRedemptionMessageData, apiClient: ApiClient);
    /**
     * The internal redemption ID.
     */
    get id(): string;
    /**
     * The ID of the user that redeemed the reward.
     */
    get userId(): string;
    /**
     * The name of the user that redeemed the reward.
     */
    get userName(): string;
    /**
     * The display name of the user that redeemed the reward.
     */
    get userDisplayName(): string;
    /**
     * Retrieves more data about the user.
     *
     * @deprecated Use {@HelixUserApi#getUserById} instead.
     */
    getUser(): Promise<import("twitch/lib").HelixUser | null>;
    /**
     * The ID of the channel where the reward was redeemed.
     */
    get channelId(): string;
    /**
     * Retrieves more data about the channel where the reward was redeemed.
     *
     * @deprecated Use {@HelixUserApi#getUserById} instead.
     */
    getChannel(): Promise<import("twitch/lib").HelixUser | null>;
    /**
     * The date when the reward was redeemed.
     */
    get redemptionDate(): Date;
    /**
     * The ID of the reward.
     */
    get rewardId(): string;
    /**
     * The name of the reward.
     */
    get rewardName(): string;
    /**
     * The prompt of the reward.
     */
    get rewardPrompt(): string;
    /**
     * The cost of the reward, in channel points.
     */
    get rewardCost(): number;
    /**
     * Whether the reward gets added to the request queue.
     */
    get rewardIsQueued(): boolean;
    /**
     * The image set associated with the reward.
     */
    get rewardImage(): PubSubRedemptionMessageImageData;
    /**
     * The full message that was sent with the notification.
     */
    get message(): string;
    /**
     * The status of the redemption.
     */
    get status(): "FULFILLED" | "UNFULFILLED";
}
