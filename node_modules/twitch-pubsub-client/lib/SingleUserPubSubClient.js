"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingleUserPubSubClient = void 0;
var tslib_1 = require("tslib");
var logger_1 = require("@d-fischer/logger");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_1 = require("twitch");
var BasicPubSubClient_1 = require("./BasicPubSubClient");
var PubSubBitsBadgeUnlockMessage_1 = require("./Messages/PubSubBitsBadgeUnlockMessage");
var PubSubBitsMessage_1 = require("./Messages/PubSubBitsMessage");
var PubSubChatModActionMessage_1 = require("./Messages/PubSubChatModActionMessage");
var PubSubRedemptionMessage_1 = require("./Messages/PubSubRedemptionMessage");
var PubSubSubscriptionMessage_1 = require("./Messages/PubSubSubscriptionMessage");
var PubSubWhisperMessage_1 = require("./Messages/PubSubWhisperMessage");
var PubSubListener_1 = require("./PubSubListener");
/**
 * A higher level PubSub client attached to a single user.
 */
var SingleUserPubSubClient = /** @class */ (function () {
    /**
     * Creates a new Twitch PubSub client.
     *
     * @expandParams
     */
    function SingleUserPubSubClient(_a) {
        var _this = this;
        var twitchClient = _a.twitchClient, pubSubClient = _a.pubSubClient, _b = _a.logLevel, logLevel = _b === void 0 ? logger_1.LogLevel.WARNING : _b;
        this._listeners = new Map();
        this._apiClient = twitchClient;
        this._pubSubClient = pubSubClient || new BasicPubSubClient_1.BasicPubSubClient(logLevel);
        this._pubSubClient.onMessage(function (topic, messageData) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, type, userId, args, _b, _c, message, _d, _e, listener;
            var e_1, _f;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _a = tslib_1.__read(topic.split('.')), type = _a[0], userId = _a[1], args = _a.slice(2);
                        _b = this._listeners.has(topic);
                        if (!_b) return [3 /*break*/, 2];
                        _c = userId;
                        return [4 /*yield*/, this._getUserId()];
                    case 1:
                        _b = _c === (_g.sent());
                        _g.label = 2;
                    case 2:
                        if (_b) {
                            message = void 0;
                            switch (type) {
                                case 'channel-bits-events-v2': {
                                    message = new PubSubBitsMessage_1.PubSubBitsMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'channel-bits-badge-unlocks': {
                                    message = new PubSubBitsBadgeUnlockMessage_1.PubSubBitsBadgeUnlockMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'channel-points-channel-v1': {
                                    message = new PubSubRedemptionMessage_1.PubSubRedemptionMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'channel-subscribe-events-v1': {
                                    message = new PubSubSubscriptionMessage_1.PubSubSubscriptionMessage(messageData, this._apiClient);
                                    break;
                                }
                                case 'chat_moderator_actions': {
                                    message = new PubSubChatModActionMessage_1.PubSubChatModActionMessage(messageData, args[0], this._apiClient);
                                    break;
                                }
                                case 'whispers': {
                                    message = new PubSubWhisperMessage_1.PubSubWhisperMessage(messageData, this._apiClient);
                                    break;
                                }
                                default:
                                    return [2 /*return*/];
                            }
                            try {
                                for (_d = tslib_1.__values(this._listeners.get(topic)), _e = _d.next(); !_e.done; _e = _d.next()) {
                                    listener = _e.value;
                                    listener.call(message);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    }
    /**
     * Adds a listener to bits events to the client.
     *
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsMessage} object.
     */
    SingleUserPubSubClient.prototype.onBits = function (callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-bits-events-v2', callback, 'bits:read')];
            });
        });
    };
    /**
     * Adds a listener to bits badge unlock events to the client.
     *
     * @param callback A function to be called when a bit badge is unlocked in the user's channel.
     *
     * It receives a {@PubSubBitsBadgeUnlockMessage} object.
     */
    SingleUserPubSubClient.prototype.onBitsBadgeUnlock = function (callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-bits-badge-unlocks', callback, 'bits:read')];
            });
        });
    };
    /**
     * Adds a listener to redemption events to the client.
     *
     * @param callback A function to be called when a channel point reward is redeemed in the user's channel.
     *
     * It receives a {@PubSubBitsRedemptionMessage} object.
     */
    SingleUserPubSubClient.prototype.onRedemption = function (callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-points-channel-v1', callback, 'channel:read:redemptions')];
            });
        });
    };
    /**
     * Adds a listener to subscription events to the client.
     *
     * @param callback A function to be called when a subscription event happens in the user's channel.
     *
     * It receives a {@PubSubSubscriptionMessage} object.
     */
    SingleUserPubSubClient.prototype.onSubscription = function (callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._addListener('channel-subscribe-events-v1', callback, 'channel_subscriptions')];
            });
        });
    };
    /**
     * Adds a listener to whisper events to the client.
     *
     * @param callback A function to be called when a whisper is sent to the user.
     *
     * It receives a {@PubSubWhisperMessage} object.
     */
    SingleUserPubSubClient.prototype.onWhisper = function (callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._addListener('whispers', callback, 'whispers:read')];
            });
        });
    };
    /**
     * Adds a listener to mod action events to the client.
     *
     * @param channelId The ID of the channel to listen to.
     * @param callback A function to be called when a mod action event is sent to the user.
     *
     * It receives a {@PubSubChatModActionMessage} object.
     */
    SingleUserPubSubClient.prototype.onModAction = function (channelId, callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._addListener('chat_moderator_actions', callback, 'channel:moderate', twitch_1.extractUserId(channelId))];
            });
        });
    };
    /**
     * Removes a listener from the client.
     *
     * @param listener A listener returned by one of the `add*Listener` methods.
     */
    SingleUserPubSubClient.prototype.removeListener = function (listener) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var newListeners;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._listeners.has(listener.type)) return [3 /*break*/, 5];
                        newListeners = this._listeners.get(listener.type).filter(function (l) { return l !== listener; });
                        if (!(newListeners.length === 0)) return [3 /*break*/, 4];
                        this._listeners.delete(listener.type);
                        return [4 /*yield*/, this._pubSubClient.unlisten(listener.type + "." + listener.userId)];
                    case 1:
                        _a.sent();
                        if (!(!this._pubSubClient.hasAnyTopics &&
                            (this._pubSubClient.isConnected || this._pubSubClient.isConnecting))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._pubSubClient.disconnect()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        this._listeners.set(listener.type, newListeners);
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SingleUserPubSubClient.prototype._getUserId = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tokenData, lastTokenError, userId, e_2, newTokenInfo, userId, e_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._userId) {
                            return [2 /*return*/, this._userId];
                        }
                        return [4 /*yield*/, this._apiClient.getAccessToken()];
                    case 1:
                        tokenData = _a.sent();
                        lastTokenError = undefined;
                        if (!tokenData) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this._apiClient.getTokenInfo()];
                    case 3:
                        userId = (_a.sent()).userId;
                        return [2 /*return*/, (this._userId = userId)];
                    case 4:
                        e_2 = _a.sent();
                        if (e_2 instanceof twitch_1.InvalidTokenError) {
                            lastTokenError = e_2;
                        }
                        else {
                            throw e_2;
                        }
                        return [3 /*break*/, 5];
                    case 5:
                        _a.trys.push([5, 9, , 10]);
                        return [4 /*yield*/, this._apiClient.refreshAccessToken()];
                    case 6:
                        newTokenInfo = _a.sent();
                        if (!newTokenInfo) return [3 /*break*/, 8];
                        return [4 /*yield*/, this._apiClient.getTokenInfo()];
                    case 7:
                        userId = (_a.sent()).userId;
                        return [2 /*return*/, (this._userId = userId)];
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_3 = _a.sent();
                        if (e_3 instanceof twitch_1.InvalidTokenError) {
                            lastTokenError = e_3;
                        }
                        else {
                            throw e_3;
                        }
                        return [3 /*break*/, 10];
                    case 10: throw lastTokenError || new Error('PubSub authentication failed');
                }
            });
        });
    };
    SingleUserPubSubClient.prototype._addListener = function (type, callback, scope) {
        var additionalParams = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            additionalParams[_i - 3] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, topicName, listener;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._pubSubClient.connect()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._getUserId()];
                    case 2:
                        userId = _a.sent();
                        topicName = tslib_1.__spread([type, userId], additionalParams).join('.');
                        listener = new PubSubListener_1.PubSubListener(type, userId, callback, this);
                        if (!this._listeners.has(topicName)) return [3 /*break*/, 3];
                        this._listeners.get(topicName).push(listener);
                        return [3 /*break*/, 5];
                    case 3:
                        this._listeners.set(topicName, [listener]);
                        return [4 /*yield*/, this._pubSubClient.listen(topicName, this._apiClient, scope)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, listener];
                }
            });
        });
    };
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], SingleUserPubSubClient.prototype, "_apiClient", void 0);
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], SingleUserPubSubClient.prototype, "_pubSubClient", void 0);
    return SingleUserPubSubClient;
}());
exports.SingleUserPubSubClient = SingleUserPubSubClient;
